{"version":3,"sources":["theme/placeholders.js","theme/animations.js","theme/base-components.js","components/survey/survey-questionnaire/survey-questionnaire.js","components/brand-logo/brand-logo.js","components/survey/survey-dashboard/survey-dashboard-styled.js","components/survey/survey-dashboard/survey-dashboard.js","components/survey/survey-eval.js","components/survey/survey.js"],"names":["css","flexCentering","scaleIn","keyframes","Button","styled","button","theme","color","primary","light","border","radius","dark","IconButton","SurveyQuestionnaire","props","this","credentials","metrics","metricsHandlers","onShowProfile","infectionProbability","onSetMetric","onSetSymptoms","className","title","metric","onChange","options","symptomsCovid","multi","closeMenuOnSelect","handWashDurations","percentageDisplay","style","onClick","data","console","log","role","aria-label","Component","CoronaSurveyHero","Question","children","Answer","_value","binaryAnswers","value","filter","o","includes","name","isMulti","option","placeholder","SurveySlide","Survey","prevSlide","currentSlide","state","setState","nextSlide","totalSlides","setTimeout","length","clsPrev","clsNext","map","c","i","key","slideNumber","SurveyCaroussel","SurveySlideRender","cls","SendIcon","width","height","viewBox","d","ProfileIcon","Logo","div","LogoInner","span","BrandLogo","Dashboard","Header","lenghts","navigation","offset","Brand","Controls","HeaderButton","breakpoint","md","sm","DashboardContent","DashboardRow","centered","DashboardTile","SurveyDashboard","postChanges","window","location","reload","handleLogout","sessionStorage","setItem","onSetSwitch","cough","fever","symptoms","proximity","washHands","washHandsDuration","washHandsSoap","riskyTravel","symptomaticContact","diagnosedContact","criticalContact","RTPCR","antibody","clsRow","to","FormControlLabel","control","Switch","checked","label","display","margin","fontSize","transform","SaveIcon","LogoutIcon","_includesSymptoms","values","reduce","acc","val","evalInfectionProbability","scalar","array","soapCoefficient","Number","durationCoefficient","Math","g","Array","fill","x","showLanding","landing","register","login","profile","showRegister","showLogin","showProfile","setRegister","target","setLogin","setSwitch","setMetric","setSymptoms","setAllMetrics","setProbability","p","postRegisterCredentials","registerPending","registerComplete","user","id","password","postLoginCredentials","response","_onLogin","undefined","email","zip","getItem","error","removeItem","isLogged","navigationHandlers","onShowLanding","onShowRegister","onShowLogin","onSetProbability","onSetAllMetrics","registerParams","onSubmit","onReset","loginParams","SurveyLanding","SurveyRegister","type","SurveyLogin","LoginInput","htmlFor"],"mappings":"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","file":"static/js/3.1c917b84.chunk.js","sourcesContent":["import { css } from 'styled-components';\r\n\r\nexport const fullViewport = css`\r\n  width: 100vw;\r\n  height: 100vh;\r\n`;\r\n\r\nexport const flexCentering = css`\r\n  display: flex;\r\n  align-items: center;\r\n  align-content: center;\r\n  justify-content: center;\r\n`;\r\n","import { keyframes } from 'styled-components';\r\n\r\nexport const scaleIn = keyframes`\r\n  0%, 100% { transform: scale(1); }\r\n  50% { transform: scale(1.1); }\r\n`;","import styled from 'styled-components';\r\nimport theme from './theme';\r\nimport { flexCentering } from './placeholders';\r\nimport { scaleIn } from './animations';\r\n\r\nexport const Button = styled.button`\r\n  ${flexCentering}\r\n  box-sizing: border-box;\r\n  min-width: 140px;\r\n  height: 50px;\r\n  margin: 25px;\r\n  padding: 0 25px;\r\n  background: ${theme.color.primary};\r\n  color: ${theme.color.light};\r\n  font-weight: 700;\r\n  border: none;\r\n  border-radius: ${theme.border.radius};\r\n  outline: none;\r\n  cursor: pointer;\r\n  transition: background .4s ease;\r\n\r\n  &:hover {\r\n    background: ${theme.color.dark};\r\n    color: ${theme.color.light};\r\n\r\n    svg {\r\n      animation: ${scaleIn} .2s ease-in;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const IconButton = styled(Button)`\r\n  svg {\r\n    margin: 0 6px 0 0;\r\n    fill: ${theme.color.light};\r\n  }\r\n`;\r\n","import React, { Component, Fragment } from 'react';\r\nimport Select from 'react-select';\r\nimport { CircularLoader } from '../../loader/loader';\r\nimport { Button } from '../../../theme/base-components';\r\nimport { percentageDisplay } from '../../../utilities/formatting';\r\nimport { binaryAnswers, handWashDurations, symptomsCovid } from '../survey';\r\nimport './survey-questionnaire.css';\r\n\r\nconst postQuestionnaire = data => {\r\n  // Dummy POST\r\n  const res = true;\r\n  console.log('post survey questionnaire', res, data);\r\n  return res;\r\n}\r\n\r\nexport default class SurveyQuestionnaire extends Component {\r\n  render() {\r\n    const { props } = this,\r\n          { credentials, metrics, metricsHandlers, onShowProfile } = props,\r\n          { infectionProbability } = metrics,\r\n          { onSetMetric, onSetSymptoms } = metricsHandlers;\r\n\r\n    return(\r\n      <div className=\"corona-survey\">\r\n        <CoronaSurveyHero /> \r\n        <Survey title=\"COVID-19 infection probability assesement\">\r\n          <SurveySlide>\r\n            <Question>\r\n              Haben Sie aktuell oder hatten Sie in den vergangenen zwei Wochen trockenen Husten?\r\n              <Answer metric=\"cough\" onChange={onSetMetric} />\r\n            </Question>\r\n            <Question>\r\n              Haben Sie aktuell oder hatten Sie in den vergangenen zwei Wochen Fieber (>37,9)?\r\n              <Answer metric=\"fever\" onChange={onSetMetric} />\r\n            </Question>\r\n            <Question>\r\n              Haben oder hatten Sie in den vergangenen zwei Wochen zusätzlich dazu eine oder mehrere der folgenden Symptome?\r\n              Wenn ja, welche?\r\n              <Answer\r\n                metric=\"symptoms\"\r\n                onChange={onSetSymptoms}\r\n                options={symptomsCovid}\r\n                multi={true}\r\n                closeMenuOnSelect={false}\r\n              />\r\n            </Question>\r\n          </SurveySlide>\r\n          <SurveySlide>\r\n            <Question>\r\n              Haben Sie sich in den vergangenen zwei Wochen für mindestens 5 Minuten in der Nähe zu Personen aufgehalten,\r\n              die geniest oder gehustet haben (z.B. in der U-Bahn, im Bus oder in einem geschlossenen Raum)?\r\n              <Answer metric=\"proximity\" onChange={onSetMetric} />\r\n            </Question>\r\n            <Question>\r\n              Waschen Sie sich häufig die Hände (mind. 3x am Tag)?\r\n              <Answer metric=\"washHands\" onChange={onSetMetric} />\r\n            </Question>\r\n            <Question>\r\n              Für wie lange waschen Sie sich die Hände?\r\n              <Answer\r\n                metric=\"washHandsDuration\"\r\n                options={handWashDurations}\r\n                onChange={onSetMetric}\r\n              />\r\n            </Question>\r\n            <Question>\r\n              Verwenden Sie Seife?\r\n              <Answer metric=\"washHandsSoap\" onChange={onSetMetric} />\r\n            </Question>\r\n          </SurveySlide>\r\n          <SurveySlide>\r\n            <Question>\r\n              Sind Sie in den vergangenen zwei Wochen in eines dieser Risikogebiete gereist?\r\n              (RKI, Stand 21.3.2020: Ägypten, China (Provinz Hubei), Iran, Italien,\r\n              Österreich (Bundesland Tirol), Spanien (Madrid),\r\n              Südkorea (Provinz Gyeongsangbuk-do (Nord-Gyeongsang),\r\n              USA (Bundesstaaten Kalifornien, Washington und New York))\r\n              <Answer metric=\"riskyTravel\" onChange={onSetMetric} />\r\n            </Question>\r\n          </SurveySlide>\r\n          <SurveySlide>\r\n            <Question>\r\n              Haben Sie aktuell oder hatten Sie in den vergangenen zwei Wochen Kontakt*\r\n              zu einer Person, die gehustet hat?\r\n              <Answer metric=\"symptomaticContact\" onChange={onSetMetric} />\r\n            </Question>\r\n            <Question>\r\n              Haben Sie aktuell oder hatten Sie in den vergangenen zwei Wochen Kontakt* zu einer Person,\r\n              die leicht an COVID-19 erkrankt ist\r\n              (labortechnisch festgestellt, ohne Fieber, mit Husten, Halskratzen und/oder ggf. Abgeschlagenheit)?\r\n              <Answer metric=\"diagnosedContact\" onChange={onSetMetric} />\r\n            </Question>\r\n            <Question>\r\n              Haben Sie aktuell oder hatten Sie in den vergangenen zwei Wochen Kontakt*\r\n              zu einer Person, die schwer an COVID-19 erkrankt ist\r\n              (labortechnisch festgestellt, mit Husten, Fieber und/oder Lungenentzündung)?\r\n              <Answer metric=\"criticalContact\" onChange={onSetMetric} />\r\n            </Question>\r\n            *Händeschütteln, Umarmen, von einem gemeinsamen Teller essen, Gegenstände berühren,\r\n            die die Infizierte Person auch berührt hat, weniger als 1,5 m Abstand.\r\n          </SurveySlide>\r\n          <SurveySlide>\r\n            <div className=\"corona-survey__conclusion\">\r\n              <p>\r\n                Vielen Dank für Ihre Teilnahme!\r\n              </p>\r\n              <p>\r\n                Die Wahrscheinlichkeit einer Infektion beträgt:\r\n                &nbsp;\r\n                {`${percentageDisplay(infectionProbability*100)}%`}\r\n              </p>\r\n              {/*TODO: Cancel on launch*/}\r\n              <p style={{color: 'red'}}>\r\n                ACHTUNG: Dies ist ein Prototyp!\r\n                Der errechnete Wert basiert auf einem\r\n                noch nicht bestätigten Modell.\r\n              </p>\r\n              <p>\r\n                <Button onClick={() => {\r\n                  postQuestionnaire({ credentials, metrics })\r\n                }}>\r\n                  <SendIcon />\r\n                  Daten absenden\r\n                </Button>\r\n              </p>\r\n              <p>\r\n                Mit Hilfe der von Ihnen bereitgestellten Daten wird eine\r\n                weitaus differenziertere Betrachtung der Situation\r\n                möglich sein als mit den gemeldeteten Labortests allein.\r\n              </p>\r\n              <p>\r\n                Halten Sie gut durch! <span role=\"img\" aria-label=\"strength\">💪</span>\r\n              </p>\r\n              <p>\r\n                <Button onClick={onShowProfile}>\r\n                  <ProfileIcon />\r\n                  Zum Profil\r\n                </Button>\r\n              </p>\r\n            </div>\r\n          </SurveySlide>\r\n        </Survey>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst CoronaSurveyHero = () => <div className=\"corona-survey-hero\"></div>;\r\n\r\nconst Question = ({ children }) => (\r\n  <div className=\"corona-survey__question\">{children}</div>\r\n);\r\n\r\nexport const Answer = props => {\r\n  const {\r\n    metric,\r\n    onChange,\r\n    options = binaryAnswers,\r\n    value,\r\n    multi = false,\r\n    closeMenuOnSelect = true,\r\n  } = props;\r\n\r\n  let _value;\r\n  if(!(value == null)) {\r\n    if(multi) {\r\n      // `value` will be an arary\r\n      _value = options.filter(o => value.includes(o.value));\r\n    } else {\r\n      // `value` will be a string || int\r\n      _value = options.filter(o => o.value === value);\r\n    }\r\n  }\r\n\r\n  return(\r\n    <Select\r\n      className=\"corona-survey__answers\"\r\n      name={metric}\r\n      isMulti={multi}\r\n      options={options}\r\n      value={_value}\r\n      onChange={(option) => { onChange(metric, option) }}\r\n      closeMenuOnSelect={closeMenuOnSelect}\r\n      placeholder={'Auswahl...'}\r\n    />\r\n  );\r\n}\r\n\r\n//------------\r\n\r\nconst SurveySlide = ({ children }) => (\r\n  <Fragment>{children}</Fragment>\r\n);\r\n\r\nclass Survey extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      totalSlides: 0,\r\n      currentSlide: 0,\r\n    }\r\n  }\r\n\r\n  prevSlide = () => {\r\n    const { currentSlide } = this.state;\r\n    if(currentSlide > 0) {\r\n      this.setState({ currentSlide: currentSlide - 1 });\r\n    }\r\n  }\r\n\r\n  nextSlide = () => {\r\n    const { totalSlides, currentSlide } = this.state;\r\n    if(currentSlide < totalSlides - 1) {\r\n      this.setState({ currentSlide: currentSlide + 1 });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      this.setState({\r\n        totalSlides: this.props.children.length,\r\n      });\r\n    }, 1500);\r\n  }\r\n\r\n  render() {\r\n    const { props, state, prevSlide, nextSlide } = this;\r\n    const { title, children } = props;\r\n    const { totalSlides, currentSlide } = state;\r\n    const clsPrev = `survery-caroussel__controls__navigation ${ currentSlide === 0 ? 'disabled' : ''}`;\r\n    const clsNext = `survery-caroussel__controls__navigation ${ currentSlide === totalSlides - 1 ? 'disabled' : ''}`;\r\n    return(\r\n      <Fragment>\r\n        {totalSlides > 0 ?\r\n          <Fragment>\r\n            <h2>{title}</h2>\r\n            <div className=\"survey__step\">\r\n              {currentSlide + 1} / <span>{totalSlides}</span>\r\n            </div>\r\n            <SurveyCaroussel>\r\n              {children.map((c, i) => (\r\n                <SurveySlideRender key={i} slideNumber={i} currentSlide={currentSlide}>\r\n                  {c.props.children}\r\n                </SurveySlideRender>\r\n              ))}\r\n              <div className=\"survery-caroussel__controls\">\r\n                <button className={clsPrev} onClick={prevSlide}>Zurück</button>\r\n                <button className={clsNext} onClick={nextSlide}>Weiter</button>\r\n              </div>\r\n            </SurveyCaroussel>\r\n          </Fragment>\r\n          :\r\n          <div className=\"corona-survey-loader-container\"><CircularLoader /></div>\r\n        }\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst SurveyCaroussel = ({ children }) => (\r\n  <div className=\"survey-caroussel\">{children}</div>\r\n);\r\n\r\nconst SurveySlideRender = ({ slideNumber, currentSlide, children }) => {\r\n  const isVisible = slideNumber === currentSlide;\r\n  const cls = `survey-slide-render ${isVisible ? 'visible': ''}`;\r\n  const clsInner = 'survey-slide-render__inner';\r\n  return <div className={cls}><div className={clsInner}>{children}</div></div>;\r\n};\r\n\r\nconst SendIcon = () => (\r\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n    <path d=\"M0 12l11 3.1 7-8.1-8.156 5.672-4.312-1.202 15.362-7.68-3.974 14.57-3.75-3.339-2.17 2.925v-.769l-2-.56v7.383l4.473-6.031 4.527 4.031 6-22z\" />\r\n  </svg>\r\n);\r\n\r\nconst ProfileIcon = () => (\r\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n    <path d=\"M20.822 18.096c-3.439-.794-6.64-1.49-5.09-4.418 4.72-8.912 1.251-13.678-3.732-13.678-5.082 0-8.464 4.949-3.732 13.678 1.597 2.945-1.725 3.641-5.09 4.418-3.073.71-3.188 2.236-3.178 4.904l.004 1h23.99l.004-.969c.012-2.688-.092-4.222-3.176-4.935z\" />\r\n  </svg>\r\n);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport theme from '../../theme/theme';\r\n\r\nconst Logo = styled.div`\r\n  font-weight: 1000;\r\n  color: ${theme.color.light};\r\n  color: inherit;\r\n  text-transform: uppercase;\r\n`;\r\n\r\nconst LogoInner = styled.span`\r\n  font-weight: 200;\r\n  text-transform: lowercase;\r\n`;\r\n\r\nconst BrandLogo = () => (\r\n  <Logo>Corona<LogoInner>hub</LogoInner></Logo>\r\n);\r\n\r\nexport default BrandLogo;","import styled from 'styled-components';\r\nimport theme from '../../../theme/theme';\r\nimport { flexCentering } from '../../../theme/placeholders';\r\nimport { IconButton } from '../../../theme/base-components';\r\n\r\nexport const Dashboard = styled.div`\r\n  ${flexCentering}\r\n`;\r\n\r\nconst headerHeight = '100px';\r\n\r\nexport const Header = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  flex-flow: row;\r\n  flex-wrap: wrap;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  box-sizing: border-box;\r\n  width: 100%;\r\n  min-height: ${headerHeight};\r\n  padding: 20px calc(2*${theme.lenghts.navigation.offset}) 20px 20px;\r\n  background: rgb(171,205,209);\r\n  background: linear-gradient(90deg, rgba(171,205,209,1) 25%, rgba(39,231,193,0) 75%);\r\n  border: none;\r\n  border-radius: 0 0 0 ${theme.border.radius};\r\n  pointer-events: none;\r\n  z-index: 100;\r\n\r\n  * {\r\n    pointer-events: auto;\r\n  }\r\n`;\r\n\r\nexport const Brand = styled.div`\r\n  display: inline-block;\r\n  font-size: 30px;\r\n  color: ${theme.color.primary};\r\n`;\r\n\r\nexport const Controls = styled.div`\r\n  ${flexCentering}\r\n  flex-flow: row;\r\n  margin: 0 20px;\r\n\r\n  a {\r\n    text-decoration: none;\r\n  }\r\n`;\r\n\r\nconst widthHeaderButtonMd = '50px';\r\n\r\nexport const HeaderButton = styled(IconButton)`\r\n  margin: 0 20px;\r\n\r\n  @media screen and (max-width: ${theme.breakpoint.md}) {\r\n    width: ${widthHeaderButtonMd};\r\n    height: ${widthHeaderButtonMd};\r\n    min-width: ${widthHeaderButtonMd};\r\n    min-height: ${widthHeaderButtonMd};\r\n    padding: 0;\r\n    border-radius: 50%;\r\n    font-size: 0;\r\n\r\n    svg {\r\n      width: calc(${widthHeaderButtonMd} / 3);\r\n      height: calc(${widthHeaderButtonMd} / 3);\r\n      margin: 0;\r\n      padding: 0;\r\n    }\r\n  }\r\n\r\n  @media screen and (max-width: ${theme.breakpoint.sm}) {\r\n    margin: 10px 10px 0;\r\n  }\r\n`;\r\n\r\nexport const DashboardContent = styled.div`\r\n  box-sizing: border-box;\r\n  width: 100%;\r\n  margin: ${headerHeight} 0 0 0;\r\n  padding: 25px;\r\n`;\r\n\r\nexport const DashboardRow = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  align-content: center;\r\n  justify-content: ${props => props.centered ? 'center' : 'flex-start'};\r\n  flex-wrap: wrap;\r\n  width: 100%;\r\n  margin: 50px 0;\r\n\r\n  &.muted {\r\n    opacity: .4;\r\n    pointer-events: none;\r\n  }\r\n`;\r\n\r\nexport const DashboardTile = styled.div`\r\n  box-sizing: border-box;\r\n  width: 33%;\r\n  margin: 5px 0 15px;\r\n  padding: 0 10px;\r\n\r\n  @media screen and (max-width: ${theme.breakpoint.md}) {\r\n    width: 50%;\r\n  }\r\n\r\n  @media screen and (max-width: ${theme.breakpoint.sm}) {\r\n    width: 100%;\r\n  }\r\n`;\r\n","import React, { Component } from 'react';\r\nimport { Link } from '@reach/router';\r\nimport { percentageDisplay } from '../../../utilities/formatting';\r\nimport { handWashDurations, symptomsCovid } from '../survey';\r\nimport { Answer } from '../survey-questionnaire/survey-questionnaire';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport { Button } from '../../../theme/base-components';\r\nimport BrandLogo from '../../brand-logo/brand-logo';\r\nimport {\r\n  Dashboard,\r\n  Header,\r\n  Brand,\r\n  Controls,\r\n  HeaderButton,\r\n  DashboardContent,\r\n  DashboardRow,\r\n  DashboardTile,\r\n} from './survey-dashboard-styled';\r\n\r\nexport default class SurveyDashboard extends Component {\r\n  postChanges = () => {\r\n    const { credentials, metrics } = this.props;\r\n    console.log(credentials, metrics);\r\n    // POST changes to server\r\n    setTimeout(() => {\r\n      window.location.reload();\r\n    }, 1200);\r\n  }\r\n\r\n  handleLogout = () => {\r\n    window.sessionStorage.setItem('coronahub-login-state', 'false');\r\n  }\r\n\r\n  render() {\r\n    const { props, postChanges, handleLogout } = this,\r\n          { metrics, metricsHandlers } = props,\r\n          { onSetSwitch, onSetMetric, onSetSymptoms } = metricsHandlers;\r\n\r\n    const {\r\n      cough,\r\n      fever,\r\n      symptoms,\r\n      proximity,\r\n      washHands,\r\n      washHandsDuration,\r\n      washHandsSoap,\r\n      riskyTravel,\r\n      symptomaticContact,\r\n      diagnosedContact,\r\n      criticalContact,\r\n      RTPCR,\r\n      antibody,\r\n      infectionProbability,\r\n    } = metrics;\r\n\r\n    const clsRow = (RTPCR || antibody) && 'muted';\r\n\r\n    return(\r\n      <Dashboard>\r\n        <Header>\r\n          <Brand>\r\n            <BrandLogo />\r\n          </Brand>\r\n          <Controls>\r\n            <HeaderButton onClick={postChanges}>\r\n              <SaveIcon /> Speichern\r\n            </HeaderButton>\r\n            <Link to =\"/\">\r\n              <HeaderButton onClick={handleLogout}>\r\n                <LogoutIcon /> Logout\r\n              </HeaderButton>\r\n            </Link>\r\n          </Controls>\r\n        </Header>\r\n        <DashboardContent>\r\n          <DashboardRow>\r\n            <DashboardTile>\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={RTPCR}\r\n                    onChange={onSetSwitch}\r\n                    name=\"RTPCR\"\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label=\"Positiver RTPCR-Test\"\r\n              />\r\n            </DashboardTile>\r\n            <DashboardTile>\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={antibody}\r\n                    onChange={onSetSwitch}\r\n                    name=\"antibody\"\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label=\"Positiver Antikörper-Test\"\r\n              />\r\n            </DashboardTile>\r\n          </DashboardRow>\r\n          <DashboardRow className={clsRow}>\r\n            <DashboardTile>\r\n              Trockener Husten\r\n              <Answer metric=\"cough\" onChange={onSetMetric} value={cough} />\r\n            </DashboardTile>\r\n            <DashboardTile>\r\n              Fieber (>37,9)\r\n              <Answer metric=\"fever\" onChange={onSetMetric} value={fever}/>\r\n            </DashboardTile>\r\n            <DashboardTile>\r\n              Nähe zu symptomatischen Personen\r\n              <Answer metric=\"proximity\" onChange={onSetMetric} value={proximity} />\r\n            </DashboardTile>\r\n            <DashboardTile>\r\n              Hände waschen (min. 3x täglich)\r\n              <Answer metric=\"washHands\" onChange={onSetMetric} value={washHands} />\r\n            </DashboardTile>\r\n            <DashboardTile>\r\n              Dauer des Hände waschens\r\n              <Answer\r\n                metric=\"washHandsDuration\"\r\n                options={handWashDurations}\r\n                onChange={onSetMetric}\r\n                value={washHandsDuration}\r\n              />\r\n            </DashboardTile>\r\n            <DashboardTile>\r\n              Hände waschen mit Seife\r\n              <Answer metric=\"washHandsSoap\" onChange={onSetMetric} value={washHandsSoap} />\r\n            </DashboardTile>\r\n            <DashboardTile>\r\n              Besuch eines Risikogebiets\r\n              <Answer metric=\"riskyTravel\" onChange={onSetMetric} value={riskyTravel} />\r\n            </DashboardTile>\r\n          </DashboardRow>\r\n          <DashboardRow className={clsRow}>\r\n            <DashboardTile>\r\n              Direkter Kontakt* zu symptomatischen Personen\r\n              <Answer metric=\"symptomaticContact\" onChange={onSetMetric} value={symptomaticContact} />\r\n            </DashboardTile>\r\n            <DashboardTile>\r\n            Direkter Kontakt* zu einer diagnostizierten Person\r\n              <Answer metric=\"diagnosedContact\" onChange={onSetMetric} value={diagnosedContact} />\r\n            </DashboardTile>\r\n            <DashboardTile>\r\n            Direkter Kontakt* zu einer diagnostizierten Person mit starken Symptomen\r\n              <Answer metric=\"criticalContact\" onChange={onSetMetric} value={criticalContact} />\r\n            </DashboardTile>\r\n            <DashboardTile>\r\n              *Händeschütteln, Umarmen, von einem gemeinsamen Teller essen, Gegenstände berühren,\r\n              die die Infizierte Person auch berührt hat, weniger als 1,5 m Abstand.\r\n            </DashboardTile>\r\n          </DashboardRow>\r\n          <DashboardRow className={clsRow}>\r\n            Zusätzliche Symptome\r\n            <Answer\r\n              metric=\"symptoms\"\r\n              onChange={onSetSymptoms}\r\n              options={symptomsCovid}\r\n              value={symptoms}\r\n              multi={true}\r\n              closeMenuOnSelect={false}\r\n            />\r\n          </DashboardRow>\r\n          <DashboardRow>\r\n            Infektionswahrscheinlichkeit:\r\n            <span style={{\r\n              display: 'inline-block',\r\n              margin: '0 0 0 5px',\r\n              fontSize: '1.5rem',\r\n              transform: 'translate(0, -.5rem)',\r\n            }}>\r\n              {`${percentageDisplay(infectionProbability*100)}%`}\r\n            </span>\r\n          </DashboardRow>\r\n          <DashboardRow centered>\r\n            <Button onClick={postChanges}>\r\n              Änderungen speichern\r\n            </Button>\r\n          </DashboardRow>\r\n        </DashboardContent>\r\n      </Dashboard>\r\n    );\r\n  }\r\n}\r\n\r\nconst SaveIcon = () => (\r\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n    <path d=\"M15.003 3h2.997v5h-2.997v-5zm8.997 1v20h-24v-24h20l4 4zm-19 5h14v-7h-14v7zm16 4h-18v9h18v-9z\" />\r\n  </svg>\r\n);\r\n\r\nconst LogoutIcon = () => (\r\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n    <path d=\"M16 9v-4l8 7-8 7v-4h-8v-6h8zm-2 10v-.083c-1.178.685-2.542 1.083-4 1.083-4.411 0-8-3.589-8-8s3.589-8 8-8c1.458 0 2.822.398 4 1.083v-2.245c-1.226-.536-2.577-.838-4-.838-5.522 0-10 4.477-10 10s4.478 10 10 10c1.423 0 2.774-.302 4-.838v-2.162z\" />\r\n  </svg>\r\n);","const _scalarMult = (scalar, array) => (\r\n  array.map(x => scalar * x)\r\n);\r\n\r\nconst _includesSymptoms = (values, symptoms) => (\r\n  values.reduce((acc, val) => acc || symptoms.includes(val), false)\r\n);\r\n\r\nconst symptomsMap = (values) => {\r\n  if(_includesSymptoms(values, [\r\n    'breathing-problems', 'high-temperature'\r\n  ])) {\r\n    return .8;\r\n  } else if(_includesSymptoms(values, [\r\n    'sore-throat', 'exhaustion',\r\n  ])) {\r\n    return .6;\r\n  } else if(_includesSymptoms(values, [\r\n    'headache', 'limb-pain', 'chills',\r\n  ])) {\r\n    return .4;\r\n  } else if(_includesSymptoms(values, [\r\n    'sniff', 'diarrhea', 'loss-of-smell',\r\n  ])) {\r\n    return .2;\r\n  } else {\r\n    return 0;\r\n  }\r\n}\r\n\r\nexport const evalInfectionProbability = metrics => {\r\n  const {\r\n    cough,\r\n    fever,\r\n    symptoms,\r\n    proximity,\r\n    washHands,\r\n    washHandsDuration,\r\n    washHandsSoap,\r\n    riskyTravel,\r\n    symptomaticContact,\r\n    diagnosedContact,\r\n    criticalContact,\r\n  } = metrics;\r\n\r\n  const soapCoefficient = washHands ? (1 - .5*Number(washHandsSoap)) : 1,\r\n        durationCoefficient = washHands ? 1 - (.75*Math.log(washHandsDuration + 4) - 1) : 1;\r\n\r\n  const n = 7,\r\n        g = new Array(n).fill(0);\r\n  \r\n  g[0] = Number(cough);\r\n  g[1] = Number(fever);\r\n  g[2] = symptomsMap(symptoms);\r\n  g[3] = .6*Number(proximity);\r\n  g[4] = (.4 - .4*Number(washHands) + .4) * soapCoefficient * durationCoefficient;\r\n  g[5] = .75*Number(riskyTravel);\r\n\r\n  if(symptomaticContact) g[6] = .5;\r\n  if(diagnosedContact) g[6] = .75;\r\n  if(criticalContact) g[6] = 1;\r\n\r\n  return _scalarMult(1 / n, g).reduce((acc, val) => acc + val, 0);\r\n}\r\n","import React, { Component, Fragment } from 'react';\r\nimport SurveyQuestionnaire from './survey-questionnaire/survey-questionnaire';\r\nimport SurveyDashboard from './survey-dashboard/survey-dashboard';\r\nimport { EllipticLoader } from '../loader/loader';\r\nimport { evalInfectionProbability } from './survey-eval';\r\nimport './survey.css';\r\n\r\nexport const binaryAnswers = [\r\n  { value: true, label: 'Ja' },\r\n  { value: false, label: 'Nein' }\r\n];\r\n\r\nexport const handWashDurations = [\r\n  { value: 0, label: '0-5 Sekunden' },\r\n  { value: 1, label: '5-10 Sekunden' },\r\n  { value: 2, label: '10-15 Sekunden' },\r\n  { value: 3, label: '15-20 Sekunden' },\r\n  { value: 4, label: '>20 Sekunden' }\r\n];\r\n\r\nexport const symptomsCovid = [\r\n  { value: 'sore-throat', label: 'Halskratzen' },\r\n  { value: 'chills', label: 'Frösteln' },\r\n  { value: 'high-temperature', label: 'erhöhte Temperatur (>37,5)' },\r\n  { value: 'breathing-problems', label: 'Atemprobleme' },\r\n  { value: 'exhaustion', label: 'Abgeschlagenheit' },\r\n  { value: 'limb-pain', label: ' Glieder- oder Muskelschmerzen' },\r\n  { value: 'loss-of-smell', label: 'Geruchs- oder Geschmacksverlust' },\r\n  { value: 'diarrhea', label: 'Durchfall' },\r\n  { value: 'headache', label: 'Kopfschmerzen' },\r\n  { value: 'sniff', label: 'Schnupfen' },\r\n];\r\n\r\nexport default class Survey extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      landing: true,\r\n      register: false,\r\n      login: false,\r\n      profile: false,\r\n      credentials: {\r\n        login: {\r\n          user: undefined,\r\n          password: undefined,\r\n        },\r\n        register: {\r\n          id: undefined,\r\n          email: undefined,\r\n          password: undefined,\r\n          zip: undefined,\r\n        },\r\n      },\r\n      registerPending: false,\r\n      registerComplete: false,\r\n      metrics: {\r\n        cough: null,\r\n        fever: null,\r\n        symptoms: [],\r\n        proximity: null,\r\n        washHands: null,\r\n        washHandsDuration: 0,\r\n        washHandsSoap: null,\r\n        riskyTravel: null,\r\n        symptomaticContact: null,\r\n        diagnosedContact: null,\r\n        criticalContact: null,\r\n        RTPCR: false,\r\n        antibody: false,\r\n        infectionProbability: 0,\r\n      },\r\n    }\r\n  }\r\n\r\n  showLanding = () => {\r\n    this.setState({\r\n      landing: true,\r\n      register: false,\r\n      login: false,\r\n      profile: false,\r\n    });\r\n  }\r\n\r\n  showRegister = () => {\r\n    this.setState({\r\n      landing: false,\r\n      register: true,\r\n    });\r\n  }\r\n\r\n  showLogin = () => {\r\n    this.setState({\r\n      landing: false,\r\n      login: true,\r\n    });\r\n  }\r\n\r\n  showProfile = () => {\r\n    this.setState({\r\n      landing: false,\r\n      register: false,\r\n      login: false,\r\n      profile: true,\r\n    })\r\n  }\r\n\r\n  setRegister = ({ target }) => {\r\n    const { credentials } = this.state;\r\n    credentials.register[target.name] = target.value;\r\n    this.setState({ credentials });\r\n  }\r\n\r\n  setLogin = ({ target }) => {\r\n    const { credentials } = this.state;\r\n    credentials.login[target.name] = target.value;\r\n    this.setState({ credentials });\r\n  }\r\n\r\n  setSwitch = ({ target }) => {\r\n    const { metrics } = this.state;\r\n    metrics[target.name] = target.checked;\r\n    if(target.checked) {\r\n      metrics.infectionProbability = 1;\r\n    } else {\r\n      metrics.infectionProbability = evalInfectionProbability(metrics);\r\n    }\r\n    this.setState({ metrics });\r\n  }\r\n\r\n  setMetric = (metric, { value }) => {\r\n    const { metrics } = this.state;\r\n    metrics[metric] = value;\r\n    metrics.infectionProbability = evalInfectionProbability(metrics);\r\n    this.setState({ metrics });\r\n  }\r\n\r\n  setSymptoms = (metric, options) => {\r\n    if(metric === 'symptoms') {\r\n      const { metrics } = this.state;\r\n      metrics.symptoms = !!options ? options.map(o => o.value) : [];\r\n      metrics.infectionProbability = evalInfectionProbability(metrics);\r\n      this.setState({ metrics });\r\n    }\r\n  }\r\n\r\n  setAllMetrics = (metrics) => {\r\n    console.log('setting all metrics', metrics);\r\n    this.setState({ metrics });\r\n  }\r\n\r\n  setProbability = p => {\r\n    const { metrics } = this.state;\r\n    metrics.infectionProbability = p;\r\n    this.setState({ metrics });\r\n  }\r\n\r\n  postRegisterCredentials = () => {\r\n    const { credentials } = this.state,\r\n          { register } = credentials;\r\n    \r\n    // Validate credentials\r\n    //if() {\r\n    // POST to server\r\n      console.log(register);\r\n      this.setState({\r\n        registerPending: true,\r\n      });\r\n    //}\r\n\r\n    // Use websockets here\r\n    // On Registration Completion\r\n    setTimeout(() => {\r\n      window.sessionStorage.setItem('coronahub-login-state', 'true');\r\n      this.setState({\r\n        register: false,\r\n        login: false,\r\n        landing: false,\r\n        registerPending: false,\r\n        registerComplete: true,\r\n        credentials: {\r\n          login: {\r\n            user: register.id,\r\n            password: register.password,\r\n          },\r\n          register,\r\n        }\r\n      });\r\n    }, 3000);\r\n  }\r\n\r\n  postLoginCredentials = () => {\r\n    const { credentials } = this.state,\r\n          { login } = credentials;\r\n    \r\n    // Validate credentials\r\n    //if() {\r\n    // POST to server\r\n      console.log(login);\r\n      const response = {\r\n        id: login.user,\r\n        metrics: {\r\n          cough: true,\r\n          fever: false,\r\n          symptoms: ['headache', 'sore-throat'],\r\n          proximity: true,\r\n          washHands: true,\r\n          washHandsDuration: 3,\r\n          washHandsSoap: true,\r\n          riskyTravel: true,\r\n          symptomaticContact: true,\r\n          diagnosedContact: false,\r\n          criticalContact: false,\r\n          RTPCR: false,\r\n          antibody: false,\r\n          infectionProbability: .508,\r\n        },\r\n      }\r\n    //}\r\n\r\n    // On Positive Server Response\r\n    setTimeout(() => {\r\n      window.sessionStorage.setItem('coronahub-login-state', 'true');\r\n      window.sessionStorage.setItem('coronahub-login-id', response.id);\r\n      this._onLogin(response.metrics);\r\n    }, 750);\r\n  }\r\n\r\n\r\n  _onLogin = metrics => {\r\n    this.setState({\r\n      landing: false,\r\n      register: false,\r\n      login: false,\r\n      profile: true,\r\n      metrics,\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    if(window.sessionStorage.getItem('coronahub-login-state') === 'true') {\r\n      const id = window.sessionStorage.getItem('coronahub-login-id');\r\n      if(!!id) {\r\n        // POST to server\r\n        console.log(id);\r\n        // Dummy response\r\n        const response = {\r\n          metrics: {\r\n            cough: true,\r\n            fever: false,\r\n            symptoms: ['headache', 'sore-throat'],\r\n            proximity: true,\r\n            washHands: true,\r\n            washHandsDuration: 3,\r\n            washHandsSoap: true,\r\n            riskyTravel: true,\r\n            symptomaticContact: true,\r\n            diagnosedContact: false,\r\n            criticalContact: false,\r\n            RTPCR: false,\r\n            antibody: false,\r\n            infectionProbability: .508,\r\n          },\r\n        }\r\n        this._onLogin(response.metrics);\r\n      } else {\r\n        console.error('Something went wrong');\r\n        // reset login\r\n        window.sessionStorage.removeItem('coronahub-login-state');\r\n        window.sessionStorage.removeItem('coronahub-login-id');\r\n        window.location.reload();\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const isLogged = window.sessionStorage.getItem('coronahub-login-state') === 'true';\r\n    const {\r\n      state,\r\n      showLanding,\r\n      showRegister,\r\n      showLogin,\r\n      showProfile,\r\n      setRegister,\r\n      setLogin,\r\n      setSwitch,\r\n      setMetric,\r\n      setSymptoms,\r\n      setProbability,\r\n      setAllMetrics,\r\n      postRegisterCredentials,\r\n      postLoginCredentials,\r\n    } = this;\r\n    const {\r\n      landing,\r\n      register,\r\n      login,\r\n      profile,\r\n      credentials,\r\n      registerPending,\r\n      registerComplete,\r\n      metrics,\r\n    } = state;\r\n    \r\n    const navigationHandlers = {\r\n      onShowLanding: showLanding,\r\n      onShowRegister: showRegister,\r\n      onShowLogin: showLogin,\r\n    }\r\n    const metricsHandlers = {\r\n      onSetMetric: setMetric,\r\n      onSetSwitch: setSwitch,\r\n      onSetSymptoms: setSymptoms,\r\n      onSetProbability: setProbability,\r\n      onSetAllMetrics: setAllMetrics,\r\n    }\r\n\r\n    const registerParams = {\r\n      credentials: credentials.register,\r\n      onChange: setRegister,\r\n      onSubmit: postRegisterCredentials,\r\n      onReset: showLanding,\r\n      registerPending,\r\n      registerComplete,\r\n    }\r\n    const loginParams = {\r\n      credentials: credentials.login,\r\n      onChange: setLogin,\r\n      onSubmit: postLoginCredentials,\r\n      onReset: showLanding,\r\n    }\r\n\r\n    return(\r\n      <Fragment>\r\n        {(!isLogged) && // && (landing || register || login)\r\n          <div className=\"survey\">\r\n            {landing && <SurveyLanding {...navigationHandlers} />}\r\n            {register && <SurveyRegister {...registerParams} />}\r\n            {login && <SurveyLogin {...loginParams} />}\r\n          </div>\r\n        }\r\n        {(isLogged && registerComplete && !profile) &&\r\n          <SurveyQuestionnaire\r\n            credentials={credentials.login}\r\n            metrics={metrics}\r\n            metricsHandlers={metricsHandlers}\r\n            onShowProfile={showProfile}\r\n          />\r\n        }\r\n        {(isLogged && profile) &&\r\n          <SurveyDashboard\r\n            credentials={credentials.login}\r\n            metrics={metrics}\r\n            metricsHandlers={metricsHandlers}\r\n          />\r\n        }\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst SurveyLanding = ({ onShowRegister, onShowLogin }) => {\r\n  return(\r\n    <div className=\"survey__landing\">\r\n      <h2>Willkommen bei der Corona-Sympthom-Umfrage!</h2>\r\n      <div>Sie sind neu bei Umfrage?</div>\r\n      <div>\r\n        <button onClick={onShowRegister}>Zur Registrierung</button>\r\n      </div>\r\n      <div>Oder haben Sie bereits teilgenommen und wollen Angaben ändern?</div>\r\n      <div>\r\n        <button onClick={onShowLogin}>Zum Login</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SurveyRegister = props => {\r\n  const {\r\n    credentials,\r\n    onChange,\r\n    onSubmit,\r\n    onReset,\r\n    registerPending,\r\n    registerComplete,\r\n  } = props;\r\n  const { id, email, zip, password } = credentials;\r\n  return(\r\n    <Fragment>\r\n      <h3>Registrierung</h3>\r\n      <div className=\"survey__form\">\r\n        <LoginInput\r\n          id=\"id\"\r\n          name=\"id\"\r\n          label=\"Benutzername (anonymisiert)\"\r\n          value={id}\r\n          onChange={onChange}\r\n        />\r\n        <LoginInput\r\n          type=\"email\"\r\n          id=\"email\"\r\n          name=\"email\"\r\n          label=\"E-Mail\"\r\n          value={email}\r\n          onChange={onChange}\r\n        />\r\n        <LoginInput\r\n          type=\"password\"\r\n          id=\"password-login\"\r\n          name=\"password\"\r\n          label=\"Passwort\"\r\n          value={password}\r\n          onChange={onChange}\r\n        />\r\n        <LoginInput\r\n          id=\"zip\"\r\n          name=\"zip\"\r\n          label=\"PLZ\"\r\n          value={zip}\r\n          onChange={onChange}\r\n        />\r\n      </div>\r\n      <button onClick={onReset}>Zurück</button>\r\n      <button onClick={onSubmit}>Registrieren</button>\r\n      {(registerPending && !registerComplete) &&\r\n        <div className=\"survey__register__progress\">\r\n          <div>\r\n            Bitte überprüfen Sie Ihr E-Mail-Postfach und bestätigen Sie die Registrierung\r\n            <div><EllipticLoader /></div>\r\n          </div>\r\n        </div>\r\n      }\r\n      <div className=\"survey__register__notes\">\r\n        <i>Hinweise / Erklärungen</i>\r\n        <p>\r\n          Ihre E-Mail-Adresse, sowie Ihr Passwort werden nur\r\n          in unkenntlicher Form in unserer Datenbank hinterlegt.\r\n          Das Unkenntlichmachen erfolgt mit Hilfe einer\r\n          kryptographischen Hash-Funktion.\r\n          Inhaber der Daten haben keine Möglichkeit,\r\n          die Klarform der E-Mail-Adresse und des Passworts zu entschlüsseln.\r\n          Die Daten sind vollkommen anonymisiert.\r\n        </p>\r\n        <p>\r\n          Wenn Sie nach der Registrierung Ihr Passwort zurücksetzen wollen,\r\n          geschieht das Versenden der Anfrage an die angegebene E-Mail-Adresse\r\n          ohne Speicherung der Klarform auf unserem Server.\r\n          Ebenso wird bei jedem Abgleich der eingegeben E-Mail-Daten\r\n          die Eingabe verschlüsselt.\r\n          Das gleiche gilt für jedwede Kontaktaufnahme unserseits an Sie.\r\n        </p>\r\n        <p>\r\n          Die PLZ wird zur Lokalisierung der Daten\r\n          auf der Karte im Dashboard verwendet werden.\r\n        </p>\r\n        <p>\r\n          Auf Anfrage können Nutzer dieser Seite\r\n          die zum Zeitpunkt der Anfrage gespeicherten Daten übermittelt bekommen\r\n          oder dessen Löschung veranlassen.\r\n        </p>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nconst SurveyLogin = props => {\r\n  const { credentials, onChange, onSubmit, onReset } = props;\r\n  const { id, password } = credentials;\r\n  return(\r\n    <Fragment>\r\n      <h3>Login</h3>\r\n      <div className=\"survey__form\">\r\n        <LoginInput\r\n          id=\"user-login\"\r\n          name=\"id\"\r\n          label=\"Benutzername / E-Mail\"\r\n          value={id}\r\n          onChange={onChange}\r\n        />\r\n        <LoginInput\r\n          type=\"password\"\r\n          id=\"password-login\"\r\n          name=\"password\"\r\n          label=\"Passwort\"\r\n          value={password}\r\n          onChange={onChange}\r\n        />\r\n      </div>\r\n      <button onClick={onReset}>Zurück</button>\r\n      <button onClick={onSubmit}>Login</button>\r\n      <div className=\"survey__login__reset\">\r\n        Passwort vergessen?\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nconst LoginInput = props => {\r\n  const { id, name, label, value, onChange, type = 'text' } = props;\r\n  return(\r\n    <div className=\"survey__form__input\">\r\n      <input type={type} id={id} name={name} value={value} onChange={onChange} />\r\n      <label htmlFor={id}>{label}</label>\r\n    </div>\r\n  );\r\n}\r\n\r\n/*\r\nconst CheckIcon = () => (\r\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n    <path d=\"M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm4.393 7.5l-5.643 5.784-2.644-2.506-1.856 1.858 4.5 4.364 7.5-7.643-1.857-1.857z\" />\r\n  </svg>\r\n);\r\n*/\r\n"],"sourceRoot":""}