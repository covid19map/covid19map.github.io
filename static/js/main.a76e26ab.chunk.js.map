{"version":3,"sources":["layers-setup.js","utilities/parse-csv.js","utilities/formatting.js","utilities/datetime.js","utilities/is-local.js","components/live-data-panel/live-data-panel.js","components/controls/controls.js","components/timeline/timeline.js","App.js","serviceWorker.js","index.js"],"names":["circleLayer","id","type","source","paint","countLayer","layout","parseCSV","str","arr","quote","row","col","c","length","cc","nc","pad","num","size","s","dateString","date","getMonth","getDate","getFullYear","shiftDateBack","setDate","isLocal","hostname","window","location","LiveDataPanel","data","confirmed","deaths","recovered","className","Controls","handleReload","handleThemeToggle","handleExpandTimeline","width","height","viewBox","d","onClick","fillRule","clipRule","Object","defineProperty","Array","prototype","value","sb","e","f","i","this","o","concat","call","sort","a","b","len","sortBy","TimelineWrapper","cls","children","TimelineNode","timestamp","currentTimestamp","clickParams","style","pointerEvents","opacity","Date","dateDisplay","CloseButton","params","Timeline","timestamps","expanded","selectedDate","handleCollapseTimeline","handleTimeSelect","map","t","key","App","document","reload","mapStyle","state","setState","timelineExpanded","target","dataset","getDataTotal","headers","Headers","url","init","method","mode","cache","request","Request","fetch","then","response","json","dataTotal","console","log","getDataCountries","text","prevState","dataCountries","latestDatasetFound","earliestDate","currentDate","getTime","selectedDataset","geoData","crs","properties","name","features","geodataFeatures","push","region","Number","geometry","coordinates","totalCases","cases","controlsParams","timelineParams","keys","Component","Map","useState","latitude","longitude","zoom","viewport","setViewport","mapStyleURL","onViewportChange","mapboxApiAccessToken","position","bottom","left","Boolean","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a76e26ab.chunk.js","sourcesContent":["export const circleLayer = {\r\n  id: 'clusters',\r\n  type: 'circle',\r\n  source: 'covid-19',\r\n  paint: {\r\n    'circle-color': [\r\n      'step',\r\n      ['get', 'confirmed'],\r\n      '#03befc', 20,\r\n      '#f1f075', 800,\r\n      '#f28cb1', 5000,\r\n      '#ba1818'\r\n    ],\r\n    'circle-radius': [\r\n      'step',\r\n      ['zoom'], 4, 2, 6, 4, [\r\n        'interpolate',\r\n        ['cubic-bezier', 0, 0.5, 1, 0.5 ],\r\n        ['get', 'confirmed'],\r\n        20,  8,\r\n        5000, 25\r\n      ]\r\n    ],\r\n  }\r\n};\r\n\r\nexport const countLayer = {\r\n  id: 'cluster-count',\r\n  type: 'symbol',\r\n  source: 'covid-19',\r\n  layout: {\r\n    'text-field': ['get', 'confirmed'],\r\n    'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\r\n    'text-size': ['step', ['zoom'], 0, 4, 11],\r\n  }\r\n};\r\n","const parseCSV = (str) => {\r\n  var arr = [];\r\n  var quote = false;  // true means we're inside a quoted field\r\n  // iterate over each character, keep track of current row and column (of the returned array)\r\n  for (var row = 0, col = 0, c = 0; c < str.length; c++) {\r\n    var cc = str[c], nc = str[c+1];        // current character, next character\r\n    arr[row] = arr[row] || [];             // create a new row if necessary\r\n    arr[row][col] = arr[row][col] || '';   // create a new column (start with empty string) if necessary\r\n    // If the current character is a quotation mark, and we're inside a\r\n    // quoted field, and the next character is also a quotation mark,\r\n    // add a quotation mark to the current column and skip the next character\r\n    if (cc === '\"' && quote && nc === '\"') { arr[row][col] += cc; ++c; continue; }  \r\n    // If it's just one quotation mark, begin/end quoted field\r\n    if (cc === '\"') { quote = !quote; continue; }\r\n    // If it's a comma and we're not in a quoted field, move on to the next column\r\n    if (cc === ',' && !quote) { ++col; continue; }\r\n    // If it's a newline (CRLF) and we're not in a quoted field, skip the next character\r\n    // and move on to the next row and move to column 0 of that new row\r\n    if (cc === '\\r' && nc === '\\n' && !quote) { ++row; col = 0; ++c; continue; }\r\n    // If it's a newline (LF or CR) and we're not in a quoted field,\r\n    // move on to the next row and move to column 0 of that new row\r\n    if (cc === '\\n' && !quote) { ++row; col = 0; continue; }\r\n    if (cc === '\\r' && !quote) { ++row; col = 0; continue; }\r\n    // Otherwise, append the current character to the current column\r\n    arr[row][col] += cc;\r\n  }\r\n  return arr;\r\n}\r\n\r\nexport default parseCSV;\r\n","export const pad = (num, size) => {\r\n  let s = num + '';\r\n  while(s.length < size) s = '0' + s;\r\n  return s;\r\n}\r\n\r\nexport const dateString = (date) => (\r\n  `${pad(date.getMonth() + 1, 2)}-${pad(date.getDate(), 2)}-${date.getFullYear()}`\r\n);\r\n\r\nexport const dateDisplay = (date) => (\r\n  `${pad(date.getDate(), 2)}.${pad(date.getMonth() + 1, 2)}.${date.getFullYear()}`\r\n);\r\n","export const shiftDateBack = (date) => {\r\n  date.setDate(date.getDate() - 1);\r\n}\r\n","const isLocal = () => {\r\n  const { hostname } = window.location;\r\n  return hostname === \"localhost\" || hostname === \"127.0.0.1\";\r\n}\r\n\r\nexport default isLocal;\r\n","import React from 'react';\r\nimport './live-data-panel.css';\r\n\r\nconst LiveDataPanel = ({ data }) => {\r\n  const { confirmed, deaths, recovered } = data;\r\n  return(\r\n    <div className=\"live-data-panel\">\r\n      <div className=\"live-data-panel__tile confirmed\">\r\n        <div className=\"live-data-panel__key\">Confirmed</div>\r\n        <div className=\"live-data-panel__value\">{confirmed}</div>\r\n      </div>\r\n      <div className=\"live-data-panel__tile deaths\">\r\n        <div className=\"live-data-panel__key\">Deaths</div>\r\n        <div className=\"live-data-panel__value\">{deaths}</div>\r\n      </div>\r\n      <div className=\"live-data-panel__tile recovered\">\r\n        <div className=\"live-data-panel__key\">Recovered</div>\r\n        <div className=\"live-data-panel__value\">{recovered}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LiveDataPanel;\r\n","import React from 'react';\r\nimport './controls.css';\r\n\r\nconst Controls = ({ handleReload, handleThemeToggle, handleExpandTimeline }) => {\r\n  return(\r\n    <div className=\"controls\">\r\n      <div className=\"controls__icon\">\r\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n          <path d=\"M12 18c1.657 0 3 1.343 3 3s-1.343 3-3 3-3-1.343-3-3 1.343-3 3-3zm0-9c1.657 0 3 1.343 3 3s-1.343 3-3 3-3-1.343-3-3 1.343-3 3-3zm0-9c1.657 0 3 1.343 3 3s-1.343 3-3 3-3-1.343-3-3 1.343-3 3-3z\" />\r\n        </svg>\r\n      </div>\r\n      <div className=\"controls__button\" onClick={handleReload}>\r\n      <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M20.944 12.979c-.489 4.509-4.306 8.021-8.944 8.021-2.698 0-5.112-1.194-6.763-3.075l1.245-1.633c1.283 1.645 3.276 2.708 5.518 2.708 3.526 0 6.444-2.624 6.923-6.021h-2.923l4-5.25 4 5.25h-3.056zm-15.864-1.979c.487-3.387 3.4-6 6.92-6 2.237 0 4.228 1.059 5.51 2.698l1.244-1.632c-1.65-1.876-4.061-3.066-6.754-3.066-4.632 0-8.443 3.501-8.941 8h-3.059l4 5.25 4-5.25h-2.92z\" />\r\n      </svg>\r\n      </div>\r\n      <div className=\"controls__button\" onClick={handleThemeToggle}>\r\n      <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M12.015 7c4.751 0 8.063 3.012 9.504 4.636-1.401 1.837-4.713 5.364-9.504 5.364-4.42 0-7.93-3.536-9.478-5.407 1.493-1.647 4.817-4.593 9.478-4.593zm0-2c-7.569 0-12.015 6.551-12.015 6.551s4.835 7.449 12.015 7.449c7.733 0 11.985-7.449 11.985-7.449s-4.291-6.551-11.985-6.551zm-.015 3c-2.21 0-4 1.791-4 4s1.79 4 4 4c2.209 0 4-1.791 4-4s-1.791-4-4-4zm-.004 3.999c-.564.564-1.479.564-2.044 0s-.565-1.48 0-2.044c.564-.564 1.479-.564 2.044 0s.565 1.479 0 2.044z\" />\r\n      </svg>\r\n      </div>\r\n      <div className=\"controls__button\" onClick={handleExpandTimeline}>\r\n        <svg width=\"24\" height=\"24\" fillRule=\"evenodd\" clipRule=\"evenodd\">\r\n          <path d=\"M5.829 6c-.412 1.165-1.524 2-2.829 2-1.656 0-3-1.344-3-3s1.344-3 3-3c1.305 0 2.417.835 2.829 2h13.671c2.484 0 4.5 2.016 4.5 4.5s-2.016 4.5-4.5 4.5h-4.671c-.412 1.165-1.524 2-2.829 2-1.305 0-2.417-.835-2.829-2h-4.671c-1.38 0-2.5 1.12-2.5 2.5s1.12 2.5 2.5 2.5h13.671c.412-1.165 1.524-2 2.829-2 1.656 0 3 1.344 3 3s-1.344 3-3 3c-1.305 0-2.417-.835-2.829-2h-13.671c-2.484 0-4.5-2.016-4.5-4.5s2.016-4.5 4.5-4.5h4.671c.412-1.165 1.524-2 2.829-2 1.305 0 2.417.835 2.829 2h4.671c1.38 0 2.5-1.12 2.5-2.5s-1.12-2.5-2.5-2.5h-13.671zm6.171 5c.552 0 1 .448 1 1s-.448 1-1 1-1-.448-1-1 .448-1 1-1z\" />\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Controls;","import React from 'react';\r\nimport { dateDisplay } from '../../utilities/formatting';\r\nimport './timeline.css';\r\n\r\n//Define a custom non-enumerable `sortBy` function using a Schwartzian transform:\r\n(function(){\r\n  if (typeof Object.defineProperty === 'function'){\r\n    try{Object.defineProperty(Array.prototype,'sortBy',{value:sb}); }catch(e){}\r\n  }\r\n  if (!Array.prototype.sortBy) Array.prototype.sortBy = sb;\r\n\r\n  function sb(f){\r\n    for (var i=this.length;i;){\r\n      var o = this[--i];\r\n      this[i] = [].concat(f.call(o,o,i),o);\r\n    }\r\n    this.sort(function(a,b){\r\n      for (var i=0,len=a.length;i<len;++i){\r\n        if (a[i]!=b[i]) return a[i]<b[i]?-1:1;\r\n      }\r\n      return 0;\r\n    });\r\n    for (var i=this.length;i;){\r\n      this[--i]=this[i][this[i].length-1];\r\n    }\r\n    return this;\r\n  }\r\n})();\r\n\r\nconst Timeline = ({\r\n  timestamps,\r\n  expanded,\r\n  selectedDate,\r\n  handleCollapseTimeline,\r\n  handleTimeSelect,\r\n}) => {\r\n  const cls = `timeline ${expanded ? 'expanded' : ''}`;\r\n  return(\r\n    <TimelineWrapper cls={cls}>\r\n      <CloseButton onClick={handleCollapseTimeline} />\r\n      {timestamps.sortBy((d) => (new Date(d))).map((t) => (\r\n        <TimelineNode\r\n          key={t}\r\n          timestamp={t}\r\n          currentTimestamp={selectedDate}\r\n          onClick={handleTimeSelect}\r\n        />\r\n      ))}\r\n    </TimelineWrapper>\r\n  );\r\n}\r\n\r\nconst TimelineWrapper = ({ cls, children }) => {\r\n  return(\r\n    <div className={cls}>{children}</div>\r\n  );\r\n}\r\n\r\nconst TimelineNode = ({\r\n  timestamp, currentTimestamp, onClick\r\n}) => {\r\n  const sty = {\r\n    pointerEvents: 'none',\r\n    opacity: '.5',\r\n  }\r\n  const clickParams = {\r\n    onClick,\r\n    'data-timestamp': timestamp,\r\n    style: timestamp === currentTimestamp ? sty : {},\r\n  }\r\n  const date = new Date(timestamp);\r\n  return(\r\n    <div className=\"timeline__node\" {...clickParams}>\r\n      <div className=\"timeline__node__circle\" {...clickParams}></div>\r\n      <div className=\"timeline__node__timestamp\" {...clickParams}>\r\n        {dateDisplay(date)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst CloseButton = ({ onClick }) => {\r\n  const params = {\r\n    className: 'close-button',\r\n    onClick,\r\n  }\r\n  return(\r\n    <div {...params}>\r\n      <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n        <path d=\"M23.954 21.03l-9.184-9.095 9.092-9.174-2.832-2.807-9.09 9.179-9.176-9.088-2.81 2.81 9.186 9.105-9.095 9.184 2.81 2.81 9.112-9.192 9.18 9.1z\" />\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timeline;\r\n","import React, { Component, useState } from 'react';\nimport ReactMapGL, { Source, Layer, NavigationControl } from 'react-map-gl';\nimport { circleLayer, countLayer } from './layers-setup';\nimport parseCSV from './utilities/parse-csv';\nimport { dateString } from './utilities/formatting';\nimport { shiftDateBack } from './utilities/datetime';\nimport isLocal from './utilities/is-local';\nimport LiveDataPanel from './components/live-data-panel/live-data-panel';\nimport Controls from './components/controls/controls';\nimport Timeline from './components/timeline/timeline';\n\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiZ2lhbm5vdHIiLCJhIjoiY2s3aHFkcDkwMGMzYjNlbzNvMWl4bGFxbyJ9.2p2O5m7aiA6Bn9vjPe7HrQ';\nconst __SATELLITE = 'satellite-v9';\nconst __DARKMODE = 'dark-v10';\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    const date = new Date();\n    shiftDateBack(date);\n    this.state = {\n      selectedDate: dateString(date),\n      dataCountries: {},\n      dataTotal: {},\n      mapStyle: __DARKMODE,\n      latestDatasetFound: false,\n      timelineExpanded: false,\n    }\n  }\n\n  handleReload = () => {\n    document.location.reload();\n  }\n\n  handleThemeToggle = () => {\n    let { mapStyle } = this.state;\n    mapStyle = mapStyle === __SATELLITE ? __DARKMODE : __SATELLITE;\n    this.setState({ mapStyle });\n  }\n\n  handleExpandTimeline = () => {\n    this.setState({ timelineExpanded: true });\n  }\n\n  handleCollapseTimeline = () => {\n    this.setState({ timelineExpanded: false });\n  }\n\n  handleTimeSelect = (e) => {\n    const { timestamp } = e.target.dataset;\n    this.setState({ selectedDate: timestamp });\n  }\n\n  getDataTotal = () => {\n    const headers = new Headers({\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }),\n          method = 'GET',\n          mode = 'cors',\n          type = 'json',\n          cache = 'default',\n          url = isLocal() ? './data-fallback/all/corona-total.json' : 'https://corona.lmao.ninja/all',\n          init = {\n            headers,\n            method,\n            mode,\n            type,\n            cache,\n          },\n          request = new Request(url, init);\n    try {\n      fetch(request, init).then((response) => {\n        response.json().then((data) => {\n          this.setState({\n            dataTotal: data,\n          });\n        });\n      });\n    } catch(e) {\n      console.log(e);\n    }\n  }\n\n  getDataCountries = (date) => {\n    const headers = new Headers(),\n          method = \"GET\",\n          mode = \"cors\",\n          type = \"text/csv\",\n          cache = \"default\",\n          url = `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/${date}.csv`,\n          init = {\n            headers,\n            method,\n            mode,\n            type,\n            cache,\n          },\n          request = new Request(url, init);\n    try {\n      fetch(request, init).then((response) => {\n        response.text().then((data) => {\n          this.setState((prevState) => ({\n            dataCountries: {\n              ...prevState.dataCountries,\n              [date]: parseCSV(data),\n            },\n            latestDatasetFound: true,\n          }));\n        });\n      });\n    } catch(e) {\n      console.log(e);\n      const { selectedDate, latestDatasetFound } = this.state;\n      if(!latestDatasetFound) {\n        let date = new Date(selectedDate);\n        shiftDateBack(date);\n        this.setState({\n          selectedDate: dateString(date),\n        });\n      }\n    }\n  }\n\n  componentDidMount() {\n    const { selectedDate } = this.state;\n    //02-29-2020 until 01-22-2020 wrong or missing geometric info\n    const earliestDate = new Date('03-01-2020');\n    let currentDate = new Date(selectedDate);\n    while(currentDate.getTime() >= earliestDate.getTime()) {\n      this.getDataCountries(dateString(currentDate));\n      shiftDateBack(currentDate);\n    }\n    this.getDataTotal();\n  }\n\n  render(){\n    const {\n      handleReload,\n      handleThemeToggle,\n      handleExpandTimeline,\n      handleCollapseTimeline,\n      handleTimeSelect,\n      state,\n    } = this;\n    const {\n      selectedDate,\n      dataTotal,\n      dataCountries,\n      mapStyle,\n      timelineExpanded,\n    } = state;\n    const selectedDataset = dataCountries[selectedDate];\n\n    let geoData = {\n      type: \"FeatureCollection\",\n      crs: {\n        type: \"name\",\n        properties: {\n          name: \"urn:ogc:def:crs:OGC:1.3:CRS84\"\n        }\n      },\n      features: []\n    }\n\n    if(selectedDataset) {\n      let geodataFeatures = [];\n      for(const row of selectedDataset){\n        if(row[0] !== 'Province/State') {\n          geodataFeatures.push({\n            type: \"Feature\",\n            properties: {\n              state: row[0],\n              region: row[1],\n              timestamp: row[2],\n              confirmed: Number(row[3]),\n              deaths: Number(row[4]),\n              recovered: Number(row[5]),\n            },\n            geometry: {\n              type: \"Point\",\n              coordinates: [Number(row[7]), Number(row[6])]\n            }\n          });\n        }\n      }\n\n      geoData.features = geodataFeatures;\n    }\n\n    const { cases, deaths, recovered } = dataTotal;\n    const totalCases = {\n      confirmed: cases,\n      deaths,\n      recovered,\n    }\n\n    const controlsParams = {\n      handleReload,\n      handleThemeToggle,\n      handleExpandTimeline,\n    }\n\n    const timelineParams = {\n      timestamps: Object.keys(dataCountries),\n      expanded: timelineExpanded,\n      selectedDate,\n      handleCollapseTimeline,\n      handleTimeSelect,\n    }\n\n    return(\n      <div className=\"app\">\n        <Controls {...controlsParams} />\n        <Timeline {...timelineParams} />\n        <LiveDataPanel data={totalCases} />\n        <Map data={geoData} mapStyle={mapStyle} />\n      </div>\n    );\n  }\n}\n\nconst Map = ({ data, mapStyle }) => {\n  const [viewport, setViewport] = useState({\n    width: '100vw',\n    height: '100vh',\n    latitude: 45,\n    longitude: 10,\n    zoom: 4,\n  });\n\n  const mapStyleURL = `mapbox://styles/mapbox/${mapStyle}`;\n\n  /*\n  const clusterParams = {\n    cluster: true,\n    clusterMaxZoom: 14,\n    clusterRadius: 50,\n    clusterProperties: { 'cluster_count': ['+', ['case', ['get', 'confirmed'], 1, 0]] },\n  }\n  */\n\n  return (\n    <ReactMapGL\n      {...viewport}\n      onViewportChange={setViewport}\n      mapboxApiAccessToken={MAPBOX_TOKEN}\n      mapStyle={mapStyleURL}\n    >\n      <Source id=\"covid-19\" type=\"geojson\" data={data}>\n        <Layer {...circleLayer} />\n        <Layer {...countLayer} />\n      </Source>\n      <div style={{position: 'absolute', bottom: '40px', left: '20px'}}>\n        <NavigationControl />\n      </div>\n    </ReactMapGL>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}