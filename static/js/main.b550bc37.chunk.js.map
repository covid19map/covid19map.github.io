{"version":3,"sources":["components/navigation/navigation.js","components/loader/loader.js","App.js","serviceWorker.js","index.js"],"names":["isActive","isCurrent","className","Navigation","handleToggle","setState","isExpanded","state","handleCollapse","this","clsNav","clsToggle","onClick","to","getProps","Component","MenuIcon","width","height","viewBox","d","HomeIcon","TableIcon","SurveyIcon","ContactIcon","ImprintIcon","MainLoader","Array","keys","map","key","genLazyRoute","routeModule","a","timeMin","Promise","all","resolve","setTimeout","then","Dashboard","lazy","Survey","App","fallback","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b550bc37.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport { Link } from \"@reach/router\"\r\nimport './navigation.css';\r\n\r\nconst isActive = ({ isCurrent }) => {\r\n  return isCurrent ? { className: \"active\" } : {}\r\n}\r\n\r\nexport default class Navigation extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isExpanded: false,\r\n    }\r\n  }\r\n\r\n  handleToggle = () => {\r\n    this.setState({\r\n      isExpanded: !this.state.isExpanded,\r\n    });\r\n  }\r\n\r\n  handleCollapse = () => {\r\n    this.setState({\r\n      isExpanded: false,\r\n    });\r\n  }\r\n\r\n  /*\r\n  componentWillUnmount() {\r\n    const { props, handleCollapse } = this,\r\n          { rootNode } = props;\r\n    rootNode.removeEventListener('click', handleCollapse);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { props, handleCollapse } = this,\r\n          { rootNode } = props;\r\n    rootNode.addEventListener('click', handleCollapse);\r\n  }\r\n  */\r\n\r\n  render() {\r\n    const { state, handleToggle } = this,\r\n          { isExpanded } = state,\r\n          clsNav = `navigation ${isExpanded ? 'expanded' : ''}`,\r\n          clsToggle = `navigation-toggle ${isExpanded ? 'expanded' : ''}`;\r\n    return(\r\n      <Fragment>\r\n        <div className={clsToggle} onClick={handleToggle}>\r\n          <MenuIcon />\r\n        </div>\r\n        <nav className={clsNav}>\r\n          <div className=\"navigation__brand\">Corona<span>hub</span></div>\r\n          <ul>\r\n            <li><HomeIcon /><Link to=\"/\" getProps={isActive}>Home</Link></li>\r\n            <li><TableIcon /><Link to=\"/table\" getProps={isActive}>Table</Link></li>\r\n            <li><SurveyIcon /><Link to=\"/survey\" getProps={isActive}>Survey</Link></li>\r\n            <li><ContactIcon /><Link to=\"/contact\" getProps={isActive}>Contact</Link></li>\r\n            <li><ImprintIcon /><Link to=\"/imprint\" getProps={isActive}>Imprint</Link></li>\r\n          </ul>\r\n        </nav>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst MenuIcon = () => (\r\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n    <path d=\"M12 18c1.657 0 3 1.343 3 3s-1.343 3-3 3-3-1.343-3-3 1.343-3 3-3zm0-9c1.657 0 3 1.343 3 3s-1.343 3-3 3-3-1.343-3-3 1.343-3 3-3zm0-9c1.657 0 3 1.343 3 3s-1.343 3-3 3-3-1.343-3-3 1.343-3 3-3z\" />\r\n  </svg>\r\n);\r\n\r\nconst HomeIcon = () => (\r\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n    <path d=\"M21 13v10h-6v-6h-6v6h-6v-10h-3l12-12 12 12h-3zm-1-5.907v-5.093h-3v2.093l3 3z\" />\r\n  </svg>\r\n);\r\n\r\nconst TableIcon = () => (\r\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n    <path d=\"M20 19h-4v-4h4v4zm-6-10h-4v4h4v-4zm6 0h-4v4h4v-4zm-12 6h-4v4h4v-4zm16-14v22h-24v-22h24zm-2 6h-20v14h20v-14zm-8 8h-4v4h4v-4zm-6-6h-4v4h4v-4z\" />\r\n  </svg>\r\n);\r\n\r\nconst SurveyIcon = () => (\r\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n    <path d=\"M7 16h10v1h-10v-1zm0-1h10v-1h-10v1zm15-13v22h-20v-22h3c1.229 0 2.18-1.084 3-2h8c.82.916 1.771 2 3 2h3zm-11 1c0 .552.448 1 1 1s1-.448 1-1-.448-1-1-1-1 .448-1 1zm9 1h-4l-2 2h-3.898l-2.102-2h-4v18h16v-18zm-13 9h10v-1h-10v1zm0-2h10v-1h-10v1z\" />\r\n  </svg>\r\n);\r\n\r\nconst ContactIcon = () => (\r\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n    <path d=\"M0 3v18h24v-18h-24zm21.518 2l-9.518 7.713-9.518-7.713h19.036zm-19.518 14v-11.817l10 8.104 10-8.104v11.817h-20z\" />\r\n  </svg>\r\n);\r\n\r\nconst ImprintIcon = () => (\r\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n    <path d=\"M20 12.875v5.068c0 2.754-5.789 4.057-9 4.057-3.052 0-9-1.392-9-4.057v-6.294l9 4.863 9-3.637zm-8.083-10.875l-12.917 5.75 12 6.5 11-4.417v7.167h2v-8.25l-12.083-6.75zm13.083 20h-4c.578-1 1-2.5 1-4h2c0 1.516.391 2.859 1 4z\" />\r\n  </svg>\r\n);\r\n","import React from 'react';\r\nimport './loader.css';\r\n\r\nconst MainLoader = () => {\r\n  return(\r\n    <div className=\"loader-wrapper\">\r\n      <div className=\"loader-title\">CORONA hub</div>\r\n      <div className=\"loader\">\r\n        {[...Array(25).keys()].map((key) => <div key={key}></div>)}\r\n      </div>\r\n\t  </div>\r\n  );\r\n}\r\n\r\nexport const CircularLoader = () => (\r\n  <div className=\"circular-loader\"></div>\r\n);\r\n\r\nexport default MainLoader;\r\n","import React, { Suspense, lazy } from 'react';\nimport { Router } from \"@reach/router\";\nimport Navigation from './components/navigation/navigation';\nimport Loader from './components/loader/loader';\n\n// TODO: set to 2000 when not in dev\nconst __MIN__LOADINGTIME = 2000;\nconst genLazyRoute = async (routeModule, timeMin = __MIN__LOADINGTIME) => {\n  return Promise.all([\n    routeModule,\n    new Promise(resolve => setTimeout(resolve, timeMin))\n  ]).then(([moduleExports]) => moduleExports);\n}\n\nconst Dashboard = lazy(() => genLazyRoute(import('./Dashboard')));\nconst Survey = lazy(() => genLazyRoute(import('./components/survey/survery')));\n\nconst App = () => {\n  return(\n    <Suspense fallback={<Loader />}>\n      <div className=\"app\">\n        <Navigation />\n        <Router>\n          <Dashboard path=\"/\" />\n          <Survey path=\"/survey\" />\n        </Router>\n      </div>\n    </Suspense>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}