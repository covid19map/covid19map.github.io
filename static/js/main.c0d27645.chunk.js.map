{"version":3,"sources":["components/data-map/layers-setup.js","components/data-map/data-map.js","utilities/formatting.js","components/data-panel/data-panel.js","components/loader/loader.js","utilities/data-mutations.js","data-mockup.js","App.js","utilities/interfaces.js","serviceWorker.js","index.js"],"names":["circleLayer","id","type","source","paint","countLayer","layout","DataMap","data","mapStyle","useState","width","height","latitude","longitude","zoom","viewport","setViewport","mapStyleURI","onViewportChange","mapboxApiAccessToken","style","position","bottom","right","__bigIntegerDisplayFormater","Intl","NumberFormat","bigIntegerDisplay","number","format","ArrowLeftIcon","maximumSignificantDigits","viewBox","d","DataPanel","handleToggleComputations","computationsExpanded","confirmed","deaths","recovered","clsComputationsToggle","className","onClick","Loader","Array","keys","map","key","__sum","x","y","__or","__ensureArray","__condenseDataset","prop","dataset","c","reduce","condenseData","props","r","Object","forEach","t","p","condenseDataset","__filterPropValuePair","values","filter","array","includes","__DATA__MOCKUP","1584820500000","provice","country","latlng","active","1584820800000","1584820813832","permuteMapStyles","currentValue","console","log","LoadingIndicator","usePromiseTracker","delay","promiseInProgress","App","handleReload","document","location","reload","handleSwitchTheme","state","setState","handleSetLive","currentTime","Date","now","handleToggleCharts","chartsExpanded","handleCollapseCharts","handleToggleFilters","filtersExpanded","handleCollapseFilters","setCountryFilter","countries","fetched","filtered","filterPropValuePair","setTime","unixtime","getLiveData","a","survey","filteredRegions","rootNode","this","condensedData","geoData","features","geodataFeatures","point","province","lat","lng","push","properties","Number","geometry","coordinates","interfaceOutGeoJSON","Component","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c0d27645.chunk.js","sourcesContent":["export const circleLayer = {\r\n  id: 'clusters',\r\n  type: 'circle',\r\n  source: 'covid-19',\r\n  paint: {\r\n    'circle-color': [\r\n      'step',\r\n      ['get', 'confirmed'],\r\n      '#03befc', 20,\r\n      '#f1f075', 800,\r\n      '#f28cb1', 5000,\r\n      '#ba1818'\r\n    ],\r\n    'circle-radius': [\r\n      'step',\r\n      ['zoom'], 4, 2, 6, 4, [\r\n        'interpolate',\r\n        ['cubic-bezier', 0, 0.5, 1, 0.5 ],\r\n        ['get', 'confirmed'],\r\n        20,  8,\r\n        5000, 25\r\n      ]\r\n    ],\r\n  }\r\n};\r\n\r\nexport const countLayer = {\r\n  id: 'cluster-count',\r\n  type: 'symbol',\r\n  source: 'covid-19',\r\n  layout: {\r\n    'text-field': ['get', 'confirmed'],\r\n    'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\r\n    'text-size': ['step', ['zoom'], 0, 4, 11],\r\n  }\r\n};\r\n","import React, { useState } from 'react';\r\nimport ReactMapGL, { Source, Layer, NavigationControl } from 'react-map-gl';\r\nimport { circleLayer, countLayer } from './layers-setup';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\n\r\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiZ2lhbm5vdHIiLCJhIjoiY2s3aHFkcDkwMGMzYjNlbzNvMWl4bGFxbyJ9.2p2O5m7aiA6Bn9vjPe7HrQ';\r\n\r\nconst DataMap = ({ data, mapStyle }) => {\r\n  const [viewport, setViewport] = useState({\r\n    width: '100vw',\r\n    height: '100vh',\r\n    latitude: 45,\r\n    longitude: 10,\r\n    zoom: 4,\r\n  });\r\n\r\n  const mapStyleURI = `mapbox://styles/mapbox/${mapStyle}`;\r\n\r\n  /*\r\n  const clusterParams = {\r\n    cluster: true,\r\n    clusterMaxZoom: 14,\r\n    clusterRadius: 50,\r\n    clusterProperties: { 'cluster_count': ['+', ['case', ['get', 'confirmed'], 1, 0]] },\r\n  }\r\n  */\r\n\r\n  return (\r\n    <ReactMapGL\r\n      {...viewport}\r\n      onViewportChange={setViewport}\r\n      mapboxApiAccessToken={MAPBOX_TOKEN}\r\n      mapStyle={mapStyleURI}\r\n    >\r\n      <Source id=\"covid-19\" type=\"geojson\" data={data}>\r\n        <Layer {...circleLayer} />\r\n        <Layer {...countLayer} />\r\n      </Source>\r\n      <div style={{position: 'absolute', bottom: '40px', right: '20px'}}>\r\n        <NavigationControl />\r\n      </div>\r\n    </ReactMapGL>\r\n  );\r\n}\r\n\r\nexport default DataMap;\r\n","export const pad = (num, size) => {\r\n  let s = num + '';\r\n  while(s.length < size) s = '0' + s;\r\n  return s;\r\n}\r\n\r\nconst __bigIntegerDisplayFormater = new Intl.NumberFormat('en-US');\r\n\r\nexport const bigIntegerDisplay = (number) => (\r\n  __bigIntegerDisplayFormater.format(number)\r\n);\r\n\r\nconst __percentageDisplayFormater = new Intl.NumberFormat(\r\n  'en-IN', { maximumSignificantDigits: 3 }\r\n);\r\n\r\nexport const percentageDisplay = (number) => (\r\n  __percentageDisplayFormater.format(number)\r\n);\r\n\r\nexport const dateString = (date) => (\r\n  `${pad(date.getMonth() + 1, 2)}-${pad(date.getDate(), 2)}-${date.getFullYear()}`\r\n);\r\n\r\nexport const dateDisplay = (date) => (\r\n  `${pad(date.getDate(), 2)}.${pad(date.getMonth() + 1, 2)}.${date.getFullYear()}`\r\n);\r\n","import React, { Fragment } from 'react';\r\nimport { bigIntegerDisplay, percentageDisplay } from '../../utilities/formatting';\r\nimport './data-panel.css';\r\n\r\nconst DataPanel = ({\r\n  data, handleToggleComputations, computationsExpanded,\r\n}) => {\r\n  const { confirmed, deaths, recovered } = data;\r\n  const clsComputations = `data-panel-computations ${computationsExpanded ? 'expanded' : ''}`;\r\n  const clsComputationsToggle = `data-panel-computations-toggle ${computationsExpanded ? 'expanded' : ''}`;\r\n  return(\r\n    <Fragment>\r\n      <div className=\"data-panel\">\r\n        <div className=\"data-panel__tile confirmed\">\r\n          <div className=\"data-panel__key\">Confirmed</div>\r\n          <div className=\"data-panel__value\">{bigIntegerDisplay(confirmed)}</div>\r\n        </div>\r\n        <div className=\"data-panel__tile deaths\">\r\n          <div className=\"data-panel__key\">Deaths</div>\r\n          <div className=\"data-panel__value\">{bigIntegerDisplay(deaths)}</div>\r\n        </div>\r\n        <div className=\"data-panel__tile recovered\">\r\n          <div className=\"data-panel__key\">Recovered</div>\r\n          <div className=\"data-panel__value\">{bigIntegerDisplay(recovered)}</div>\r\n        </div>\r\n        <div className={clsComputationsToggle} onClick={handleToggleComputations}>\r\n          <ArrowLeftIcon />\r\n        </div>\r\n      </div>\r\n      {null &&\r\n      <div className={clsComputations}>\r\n        <div className=\"data-panel-computations__content\">\r\n          <LiveDataComputations confirmed={confirmed} deaths={deaths} recovered={recovered}>\r\n            Assuming the recorded data\r\n          </LiveDataComputations>\r\n          <LiveDataComputations confirmed={Math.round(1.3333*confirmed)} deaths={deaths} recovered={recovered}>\r\n            Assuming 33.33&#37; unrecorded cases\r\n          </LiveDataComputations>\r\n          <LiveDataComputations confirmed={Math.round(1.5*confirmed)} deaths={deaths} recovered={recovered}>\r\n            Assuming 50&#37; unrecorded cases\r\n          </LiveDataComputations>\r\n        </div>\r\n      </div>\r\n      }\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nconst LiveDataComputations = ({\r\n  confirmed, deaths, recovered, children\r\n}) => {\r\n  return(\r\n    <div className=\"data-panel-computations__block\">\r\n      <div className=\"data-panel-computations__metric\">\r\n        <span className=\"data-panel-computations__metric-key\">\r\n          Active cases:&nbsp;\r\n        </span>\r\n        <span className=\"data-panel-computations__metric-value\">\r\n          {bigIntegerDisplay(confirmed - deaths - recovered)}\r\n        </span>\r\n      </div>\r\n      <div className=\"data-panel-computations__metric\">\r\n        <span className=\"live-data-panel-computations__metric-key\">\r\n          Recover rate:&nbsp;\r\n        </span>\r\n        <span className=\"data-panel-computations__metric-value\">\r\n          {`${percentageDisplay(recovered / confirmed * 100)}%`}\r\n        </span>\r\n      </div>\r\n      <div className=\"data-panel-computations__metric\">\r\n        <span className=\"data-panel-computations__metric-key\">\r\n          Mortality rate:&nbsp;\r\n        </span>\r\n        <span className=\"data-panel-computations__metric-value\">\r\n          <span className=\"data-panel-computations__fatal\">\r\n            {`${percentageDisplay(deaths / confirmed * 100)}%`}\r\n          </span>\r\n        </span>\r\n      </div>\r\n      <div className=\"data-panel-computations__block-description\">\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst ArrowLeftIcon = () => (\r\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n    <path d=\"M24 11.871l-5-4.871v3h-19v4h19v3z\" />\r\n  </svg>\r\n);\r\n\r\nexport default DataPanel;\r\n","import React from 'react';\r\nimport './loader.css';\r\n\r\nconst Loader = () => {\r\n  return(\r\n    <div className=\"loader-wrapper\">\r\n      <div className=\"loader-title\">COVID-19 Map</div>\r\n      <div className=\"loader\">\r\n        {[...Array(25).keys()].map((key) => <div key={key}></div>)}\r\n      </div>\r\n\t  </div>\r\n  );\r\n}\r\n\r\nexport default Loader;\r\n","const __sum = (x, y) => x + y;\r\nconst __or = (x, y) => x || y;\r\nconst __ensureArray = (x) => {\r\n  if(typeof x !== 'object') {\r\n    x = [x];\r\n  }\r\n  return x;\r\n}\r\nconst __includesArray = (array, possiblities) => (\r\n  possiblities.map(p => array.includes(p)).reduce(__or)\r\n)\r\n\r\nconst __condenseDataset = (prop, dataset) => (\r\n  dataset.map(c => c[prop]).reduce(__sum)\r\n);\r\n\r\nexport const condenseDataset = (props, dataset) => {\r\n  if(typeof props === 'object') {\r\n    return props.map(p => __condenseDataset(p, dataset)).reduce(__sum);\r\n  } else {\r\n    return __condenseDataset(props, dataset);\r\n  }\r\n}\r\n\r\nexport const condenseData = (props, data) => {\r\n  const r = {}\r\n  Object.keys(data).forEach(t => {\r\n    r[t] = condenseDataset(props, data[t])\r\n  });\r\n  return r;\r\n}\r\n\r\nconst __filterProps = (props, dataset) => {\r\n  props = __ensureArray(props);\r\n  return dataset.map(p => Object.keys(p)\r\n    .filter(key => props.includes(key))\r\n    .reduce((obj, key) => {\r\n      obj[key] = p[key];\r\n      return obj;\r\n    }, {}));\r\n}\r\n\r\nexport const filterProps = (props, data) => {\r\n  const r = {}\r\n  Object.keys(data).forEach(t => {\r\n    r[t] = __filterProps(props, data[t])\r\n  });\r\n  return r;\r\n}\r\n\r\nconst __filterPropValuePair = (props, values, dataset) => (\r\n  dataset.filter(\r\n    p => __includesArray(values, __ensureArray(props).map(x => p[x]))\r\n  )\r\n);\r\n\r\nexport const filterPropValuePair = (props, values, data) => {\r\n  const r = {}\r\n  Object.keys(data).forEach(t => {\r\n    r[t] = __filterPropValuePair(props, values, data[t])\r\n  });\r\n  return r;\r\n}\r\n","const __DATA__MOCKUP = {\r\n  1584820500000: [\r\n    {\r\n      provice: 'Gotham',\r\n      country: 'Deinemutterland',\r\n      latlng: [51, 9],\r\n      confirmed: 10000,\r\n      recovered: 1,\r\n      deaths: 5000,\r\n      active: 4999,\r\n    },\r\n    {\r\n      provice: 'Central City',\r\n      country: 'Fickfisch',\r\n      latlng: [52, 10],\r\n      confirmed: 100000,\r\n      recovered: 1000,\r\n      deaths: 60000,\r\n      active: 39000,\r\n    },\r\n    {\r\n      provice: 'Star',\r\n      country: 'Bagdad',\r\n      latlng: [50, 7],\r\n      confirmed: 20,\r\n      recovered: 0,\r\n      deaths: 0,\r\n      active: 20,\r\n    }\r\n  ],\r\n  1584820800000: [\r\n    {\r\n      provice: 'Gotham',\r\n      country: 'Deinemutterland',\r\n      latlng: [51, 9],\r\n      confirmed: 20000,\r\n      recovered: 10,\r\n      deaths: 15000,\r\n      active: 9990,\r\n    },\r\n    {\r\n      provice: 'Central City',\r\n      country: 'Fickfisch',\r\n      latlng: [52, 10],\r\n      confirmed: 100000,\r\n      recovered: 40000,\r\n      deaths: 60000,\r\n      active: 0,\r\n    },\r\n    {\r\n      provice: 'Star',\r\n      country: 'Bagdad',\r\n      latlng: [50, 7],\r\n      confirmed: 50,\r\n      recovered: 10,\r\n      deaths: 20,\r\n      active: 20,\r\n    }\r\n  ],\r\n  1584820813832: [\r\n    {\r\n      provice: 'Gotham',\r\n      country: 'Deinemutterland',\r\n      latlng: [51, 9],\r\n      confirmed: 100000,\r\n      recovered: 20,\r\n      deaths: 50000,\r\n      active: 49980,\r\n    },\r\n    {\r\n      provice: 'Central City',\r\n      country: 'Fickfisch',\r\n      latlng: [52, 10],\r\n      confirmed: 160000,\r\n      recovered: 80000,\r\n      deaths: 65000,\r\n      active: 15000,\r\n    },\r\n    {\r\n      provice: 'Star',\r\n      country: 'Bagdad',\r\n      latlng: [50, 7],\r\n      confirmed: 200,\r\n      recovered: 40,\r\n      deaths: 80,\r\n      active: 80,\r\n    }\r\n  ]\r\n}\r\n\r\nexport default __DATA__MOCKUP;\r\n","import React, { Component } from 'react';\nimport { usePromiseTracker, trackPromise } from 'react-promise-tracker';\nimport DataMap from './components/data-map/data-map';\nimport DataPanel from './components/data-panel/data-panel';\nimport Loader from './components/loader/loader';\nimport { condenseData, filterPropValuePair } from './utilities/data-mutations';\nimport { shiftDateBack } from './utilities/datetime';\nimport { dateString } from './utilities/formatting';\nimport { interfaceOutGeoJSON } from './utilities/interfaces';\n\nimport __DATA__MOCKUP from './data-mockup';\n\n//const __PROXY = 'https://cors-anywhere.herokuapp.com/';\nconst __SATELLITE = 'satellite-v9';\nconst __LIGHTMODE = 'light-v10';\nconst __DARKMODE = 'dark-v10';\nconst __STREETS = 'streets-v11';\n\nconst permuteMapStyles = (currentValue) => {\n  switch(currentValue) {\n    case __SATELLITE:\n      return __LIGHTMODE;\n    case __LIGHTMODE:\n      return __DARKMODE;\n    case __DARKMODE:\n      return __STREETS;\n    case __STREETS:\n      return __SATELLITE;\n    default:\n      console.log(`Sorry, the style '${currentValue}' doesn't exist.`);\n  }\n}\n\nconst LoadingIndicator = () => {\n  const { promiseInProgress } = usePromiseTracker({ delay: 3000 });\n  return(promiseInProgress && <Loader />);  \n}\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      mapStyle: __DARKMODE,\n      data: {\n        fetched: {},\n        filtered: {},\n      },\n      survey: {},\n      currentTime: 1584820813832,\n      filteredRegions: [],\n      chartsExpanded: false,\n      filtersExpanded: false,\n    }\n    this.rootNode = null;\n  }\n\n  handleReload = () => {\n    document.location.reload();\n  }\n\n  handleSwitchTheme = () => {\n    const { mapStyle } = this.state;\n    this.setState({ mapStyle: permuteMapStyles(mapStyle) });\n  }\n\n  handleSetLive = () => {\n    this.setState({\n      currentTime: Date.now(),\n    });\n  }\n\n  handleToggleCharts = () => {\n    this.setState({\n      chartsExpanded: !this.state.chartsExpanded,\n    });\n  }\n\n  handleCollapseCharts = () => {\n    this.setState({ chartsExpanded: false });\n  }\n\n  handleToggleFilters = () => {\n    this.setState({\n      filtersExpanded: !this.state.filtersExpanded,\n    });\n  }\n\n  handleCollapseFilters = () => {\n    this.setState({ filtersExpanded: false });\n  }\n\n  setCountryFilter = (countries) => {\n    let { data } = this.state;\n    const { fetched } = data;\n    data.filtered = filterPropValuePair(['province', 'country'], countries, fetched);\n    this.setState({ data });\n  }\n\n  setTime = (unixtime) => {\n    this.setState({\n      currentTime: unixtime,\n    });\n  }\n\n  getLiveData = async () => {\n    // TODO: fetch from backend here\n    return __DATA__MOCKUP;\n  }\n\n  async componentDidMount() {\n    const data = await this.getLiveData();\n    this.setState({\n      data: {\n        fetched: data,\n        filtered: data,\n      }\n    });\n  }\n\n  render(){\n    const {\n      state,\n      handleToggleCharts,\n      handleCollapseCharts,\n      handleToggleFilters,\n      handleCollapseFilters,\n    } = this;\n    const {\n      mapStyle,\n      data: {fetched, filtered},\n      survey,\n      currentTime,\n      filteredRegions,\n      chartsExpanded,\n      filtersExpanded,\n    } = state;\n\n    const condensedData = {\n      confirmed: condenseData('confirmed', filtered)[currentTime],\n      recovered: condenseData('recovered', filtered)[currentTime],\n      deaths: condenseData('deaths', filtered)[currentTime],\n    };\n    const geoData = interfaceOutGeoJSON(filtered[currentTime]);    \n\n    return(\n      <div className=\"app\">\n        <LoadingIndicator />\n        <DataPanel data={condensedData} />\n        {geoData && <DataMap data={geoData} mapStyle={mapStyle} />}\n      </div>\n    );\n  }\n}\n","export const interfaceOutGeoJSON = (dataset) => {\r\n  let geoData = {\r\n    type: 'FeatureCollection',\r\n    features: [],\r\n  }\r\n  if(dataset) {\r\n    let geodataFeatures = [];\r\n    for(const point of dataset){\r\n      const {\r\n        province,\r\n        country,\r\n        confirmed,\r\n        recovered,\r\n        deaths,\r\n        latlng,\r\n      } = point;\r\n      const [ lat, lng ] = latlng;\r\n      geodataFeatures.push({\r\n        type: 'Feature',\r\n        properties: {\r\n          province,\r\n          country,\r\n          confirmed: Number(confirmed),\r\n          recovered: Number(recovered),\r\n          deaths: Number(deaths),\r\n        },\r\n        geometry: {\r\n          type: 'Point',\r\n          coordinates: [Number(lng), Number(lat)],\r\n        }\r\n      });\r\n    }\r\n    geoData.features = geodataFeatures;\r\n  }\r\n  return geoData;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}